// code generated by gpt-4 turbo
fn main() {
    println!("a = closure();");
    let mut a = closure();
    a(5);
    a(10);
}

fn closure() -> Box<dyn FnMut(i32)> {
    // 変数sumを初期値0で定義します。
    // この変数はクロージャ内で使用され、クロージャが呼び出されるたびに更新されます。
    let mut sum = 0;

    // Box::newを使用して、クロージャをヒープ上に割り当てます。
    // これにより、クロージャの所有権が関数から呼び出し元に移動されます。
    Box::new(move |n: i32| {
        // クロージャは引数nを受け取ります。
        // nはi32型の整数です。

        // sumの値にnを加算します。
        // sumは可変変数なので、値を変更することができます。
        // moveキーワードを使用することで、クロージャ内でsumの所有権を取得し、変更を可能にしています。
        sum += n;

        // 現在のsumの値を出力します。
        // printlnマクロを使用して、sumの値を文字列に変換し、コンソールに出力します。
        println!("{}", sum);

        // クロージャは何も返しません。
        // 返り値の型は()（ユニット型）です。
    })

    // Box<dyn FnMut(i32)>を返します。
    // これは、i32型の引数を受け取り、環境を変更可能な形でキャプチャするクロージャを表します。
    // Boxはクロージャをヒープ上に割り当て、そのポインタを返します。
    // dynキーワードは、トレイトオブジェクトを表し、実際の型が実行時に決定されることを示します。
}
