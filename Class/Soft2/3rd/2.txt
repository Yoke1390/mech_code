import tracemalloc

tracemalloc.start()


def measure_Fib(n):
    recursion_count = 0

    snapshot1 = tracemalloc.take_snapshot().filter_traces((
        tracemalloc.Filter(False, "/Users/yosukemaeda/.pyenv/*"),
        tracemalloc.Filter(False, "<frozen abc>"),
    ))

    def Fib(n):
        nonlocal recursion_count
        recursion_count += 1
        if n == 0:
            return 0
        if n == 1:
            return 1
        return Fib(n - 1) + Fib(n - 2)

    result = Fib(n)

    snapshot2 = tracemalloc.take_snapshot().filter_traces((
        tracemalloc.Filter(False, "/Users/yosukemaeda/.pyenv/*"),
        tracemalloc.Filter(False, "<frozen abc>"),
    ))

    top_stats = snapshot2.compare_to(snapshot1, 'lineno')
    size_diff_sum = sum(stat.size_diff for stat in top_stats)

    print(f"Fib({n}) -> {result}, recursion = {recursion_count} times, memory = {size_diff_sum} bytes")
    return recursion_count, size_diff_sum


for i in range(0, 40, 5):
    measure_Fib(i)

# 実行結果
$ python measure_Fib.py

Fib(0) -> 0, recursion = 1 times, memory = 160 bytes
Fib(5) -> 5, recursion = 15 times, memory = 160 bytes
Fib(10) -> 55, recursion = 177 times, memory = 104 bytes
Fib(15) -> 610, recursion = 1973 times, memory = 224 bytes
Fib(20) -> 6765, recursion = 21891 times, memory = 224 bytes
Fib(25) -> 75025, recursion = 242785 times, memory = 280 bytes
Fib(30) -> 832040, recursion = 2692537 times, memory = 224 bytes
Fib(35) -> 9227465, recursion = 29860703 times, memory = 168 bytes
